{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nvar RNCImageEditor = NativeModules.RNCImageEditor;\n\nvar ImageEditor = function () {\n  function ImageEditor() {\n    _classCallCheck(this, ImageEditor);\n  }\n\n  _createClass(ImageEditor, null, [{\n    key: \"cropImage\",\n    value: function cropImage(uri, cropData) {\n      return RNCImageEditor.cropImage(uri, cropData);\n    }\n  }]);\n\n  return ImageEditor;\n}();\n\nexport default ImageEditor;","map":{"version":3,"sources":["/Users/delesslin/language-project/client/node_modules/@react-native-community/image-editor/lib/ImageEditor.js"],"names":["RNCImageEditor","NativeModules","ImageEditor","uri","cropData","cropImage"],"mappings":";;;AAWA,IAAOA,cAAP,GAAyBC,aAAzB,CAAOD,cAAP;;IAqCME,W;;;;;;;WAaJ,mBAAiBC,GAAjB,EAA8BC,QAA9B,EAAwE;AACtE,aAAOJ,cAAc,CAACK,SAAf,CAAyBF,GAAzB,EAA8BC,QAA9B,CAAP;AACD;;;;;;AAGH,eAAeF,WAAf","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport {NativeModules} from 'react-native';\n\nconst {RNCImageEditor} = NativeModules;\n\ntype ImageCropData = {\n  /**\n   * The top-left corner of the cropped image, specified in the original\n   * image's coordinate space.\n   */\n  offset: {|\n    x: number,\n    y: number,\n  |},\n  /**\n   * The size (dimensions) of the cropped image, specified in the original\n   * image's coordinate space.\n   */\n  size: {|\n    width: number,\n    height: number,\n  |},\n  /**\n   * (Optional) size to scale the cropped image to.\n   */\n  displaySize?: ?{|\n    width: number,\n    height: number,\n  |},\n  /**\n   * (Optional) the resizing mode to use when scaling the image. If the\n   * `displaySize` param is not specified, this has no effect.\n   */\n  resizeMode?: ?$Enum<{\n    contain: string,\n    cover: string,\n    stretch: string,\n  }>,\n};\n\nclass ImageEditor {\n  /**\n   * Crop the image specified by the URI param. If URI points to a remote\n   * image, it will be downloaded automatically. If the image cannot be\n   * loaded/downloaded, the promise will be rejected. On Android, a\n   * downloaded image may be cached in external storage, a publicly accessible\n   * location, if it has more available space than internal storage.\n   *\n   * If the cropping process is successful, the resultant cropped image\n   * will be stored in the Cache Path, and the URI returned in the promise\n   * will point to the image in the cache path. Remember to delete the\n   * cropped image from the cache path when you are done with it.\n   */\n  static cropImage(uri: string, cropData: ImageCropData): Promise<string> {\n    return RNCImageEditor.cropImage(uri, cropData);\n  }\n}\n\nexport default ImageEditor;\n"]},"metadata":{},"sourceType":"module"}